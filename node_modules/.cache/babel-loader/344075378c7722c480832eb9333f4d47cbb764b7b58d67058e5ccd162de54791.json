{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\progress-bar\\\\src\\\\calculator\\\\MoscowExchange.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function MoscowExchange() {\n  _s();\n  const [indexDates, setIndexDates] = useState(null);\n  useEffect(() => {\n    fetch(\"./indices.csv\").then(r => r.text()).then(text => {\n      const data = text.split(\"\\n\").slice(1).map(line => {\n        const [date, index] = line.split(\",\");\n        return {\n          date,\n          index\n        };\n      });\n      setIndexDates(data);\n    });\n  }, []);\n  const startMonth = 5;\n  const startYear = 2021;\n  const contribution = 100000;\n\n  // https://www.youtube.com/watch?v=zJDtL-vfWfY\n\n  if (indexDates === null) {\n    return null;\n  }\n  console.log(groupData(indexDates, startMonth, startYear), \">\");\n  const data = groupData(indexDates, startMonth, startYear);\n  const result = [];\n  const startIndex = data[0].index;\n  for (const {\n    month,\n    year,\n    index\n  } of data) {\n    const currentBalance = contribution * index / startIndex;\n    result.push({\n      month,\n      year,\n      currentBalance\n    });\n  }\n  console.log(result, \"?\");\n  // for \n\n  // MM.YY  Balance  M/M  Total\n  // 05.21  100_000                \n  // 06.21  105_000  +5%    +5%\n  // 07.21   95_000  -9.5%  -5%      \n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(MoscowExchange, \"LSRywJoVSW1YF+JvTWGdjT9GfU8=\");\n_c = MoscowExchange;\nfunction groupData(indexDates, startMonth, startYear) {\n  const results = [];\n  while (true) {\n    const dateStart = `${startYear}-${startMonth.toString().padStart(2, \"0\")}`;\n    const startIndex = indexDates.find(({\n      date\n    }) => date.startsWith(dateStart));\n    if (startIndex === undefined) {\n      break;\n    }\n    results.push({\n      year: startYear,\n      month: startMonth,\n      index: startIndex.index\n    });\n    startMonth++;\n    if (startMonth > 12) {\n      startMonth = 1;\n      startYear++;\n    }\n  }\n  return results;\n  // return [\n  //   { month: 5, year: 2021, index },\n  //   { month, year, index },\n  //   { month, year, index },\n  //   { month: 3, year: 2024, index },\n  // ]\n}\nvar _c;\n$RefreshReg$(_c, \"MoscowExchange\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MoscowExchange","_s","indexDates","setIndexDates","fetch","then","r","text","data","split","slice","map","line","date","index","startMonth","startYear","contribution","console","log","groupData","result","startIndex","month","year","currentBalance","push","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","results","dateStart","toString","padStart","find","startsWith","undefined","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/progress-bar/src/calculator/MoscowExchange.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nexport function MoscowExchange() {\r\n  const [indexDates, setIndexDates] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch(\"./indices.csv\").then(r => r.text()).then(text => {\r\n      const data = text.split(\"\\n\").slice(1).map(line => {\r\n        const [date, index] = line.split(\",\");\r\n        return { date, index };\r\n      });\r\n      setIndexDates(data);\r\n    });\r\n  }, []);\r\n\r\n  const startMonth = 5;\r\n  const startYear = 2021;\r\n\r\n  const contribution = 100_000;\r\n\r\n  // https://www.youtube.com/watch?v=zJDtL-vfWfY\r\n  \r\n\r\n  if (indexDates === null) {\r\n    return null;\r\n  }\r\n\r\n  \r\n\r\n  console.log(groupData(indexDates, startMonth, startYear), \">\")\r\n  const data = groupData(indexDates, startMonth, startYear)\r\n\r\n  const result = []\r\n  const startIndex = data[0].index;\r\n\r\n  for (const { month, year, index} of data) {\r\n    const currentBalance = contribution * index / startIndex\r\n    result.push({\r\n      month,\r\n      year,\r\n      currentBalance\r\n    })\r\n  }\r\n\r\n  console.log(result, \"?\")\r\n  // for \r\n\r\n  // MM.YY  Balance  M/M  Total\r\n  // 05.21  100_000                \r\n  // 06.21  105_000  +5%    +5%\r\n  // 07.21   95_000  -9.5%  -5%      \r\n\r\n  return (\r\n    <table>\r\n      <tbody>\r\n        {/* {tableData.map(({year, month, index}) => {\r\n          return (\r\n            <tr>\r\n              <td></td>\r\n            </tr>\r\n          )\r\n        })} */}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nfunction groupData(indexDates, startMonth, startYear) {\r\n  const results = []\r\n  while(true) {\r\n    const dateStart = `${startYear}-${startMonth.toString().padStart(2, \"0\")}`\r\n    const startIndex = indexDates.find(({date}) => date.startsWith(dateStart))\r\n    if (startIndex === undefined) {\r\n      break\r\n    }\r\n    results.push({\r\n      year: startYear,\r\n      month: startMonth,\r\n      index: startIndex.index\r\n    })\r\n    startMonth++\r\n    if (startMonth > 12) {\r\n      startMonth = 1\r\n      startYear++\r\n    }\r\n  }\r\n  return results\r\n  // return [\r\n  //   { month: 5, year: 2021, index },\r\n  //   { month, year, index },\r\n  //   { month, year, index },\r\n  //   { month: 3, year: 2024, index },\r\n  // ]\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}