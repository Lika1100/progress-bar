{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\progress-bar\\\\src\\\\progressBar\\\\ProgressBar.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport \"./progressBar.css\";\nimport star from \"./star.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ProgressBar({\n  thresholds,\n  value\n}) {\n  _s();\n  const [progress, setProgress] = useState(value);\n  // [25, 50, 100, 200, 500, 1000]\n  const getColor = () => {\n    return \"violet\";\n  };\n  const widthOfOneEl = 100 / thresholds.length;\n  function calcWidth(value, arr) {\n    if (arr.includes(value)) {\n      return arr.indexOf(value) + 1;\n    }\n    const indexNextEl = arr.findIndex(x => value < x);\n    const prevValue = arr[indexNextEl - 1] === undefined ? arr[indexNextEl] : arr[indexNextEl - 1];\n    const k = value / prevValue > 1 ? value / prevValue - 1 : value / prevValue;\n    const result = k + indexNextEl;\n    console.log(k, indexNextEl, arr[indexNextEl]);\n    return result;\n  }\n  console.log(calcWidth(10, thresholds));\n  const percentColorFill = calcWidth(value, thresholds) / thresholds.length * 100;\n  const k = calcWidth(value, thresholds);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar\",\n      style: {\n        background: `linear-gradient(to right, violet ${percentColorFill}%, #eee ${percentColorFill}%)`\n      },\n      children: thresholds.map((step, i) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-item\",\n          style: {\n            width: `${widthOfOneEl}%`\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-star\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: star,\n              className: \"progress-star-img\",\n              style: {\n                background: k > 0 && i <= k ? \"red\" : \"\",\n                top: \"-10px\",\n                left: `80px`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-step\",\n            children: step\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 20\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\n//<div className='progress-bar-fill' style={{width: `${progress}%`, backgroundColor: getColor()}}></div>\n_s(ProgressBar, \"naLTzwwGAM0g/JVfGXEZ4LabJ9c=\");\n_c = ProgressBar;\nvar _c;\n$RefreshReg$(_c, \"ProgressBar\");","map":{"version":3,"names":["React","useState","star","jsxDEV","_jsxDEV","ProgressBar","thresholds","value","_s","progress","setProgress","getColor","widthOfOneEl","length","calcWidth","arr","includes","indexOf","indexNextEl","findIndex","x","prevValue","undefined","k","result","console","log","percentColorFill","className","children","style","background","map","step","i","width","src","top","left","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/progress-bar/src/progressBar/ProgressBar.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport \"./progressBar.css\";\r\nimport star from \"./star.svg\"\r\n\r\nexport function ProgressBar({ thresholds, value }) {\r\n  const [progress, setProgress] = useState(value)\r\n  // [25, 50, 100, 200, 500, 1000]\r\n  const getColor = () => {\r\n    return \"violet\"\r\n  }\r\n  const widthOfOneEl = 100/thresholds.length\r\n  function calcWidth(value, arr) {\r\n    if (arr.includes(value)) {\r\n        return arr.indexOf(value) + 1\r\n    }\r\n    const indexNextEl = arr.findIndex((x) => value < x)\r\n    const prevValue = arr[indexNextEl - 1] === undefined ? arr[indexNextEl] : arr[indexNextEl - 1]\r\n    const k = value/prevValue > 1 ? value/prevValue - 1 : value/prevValue\r\n    const result = k + indexNextEl\r\n    console.log(k, indexNextEl, arr[indexNextEl])\r\n    return result\r\n  }\r\n  console.log(calcWidth(10, thresholds))\r\n  const percentColorFill = calcWidth(value, thresholds)/thresholds.length*100\r\n  const k = calcWidth(value, thresholds)\r\n  return (\r\n    <div className=\"container\">\r\n        <div className='progress-bar' \r\n          style={{background: `linear-gradient(to right, violet ${percentColorFill}%, #eee ${percentColorFill}%)`}}\r\n        >\r\n            {thresholds.map((step, i) => {\r\n                return (\r\n                   <div className='progress-item' style={{width: `${widthOfOneEl}%`}}>\r\n                      <div className='progress-star'>\r\n                        <img \r\n                          src={star} \r\n                          className='progress-star-img'\r\n                          style={{background: k > 0 && i <= k ? \"red\" : \"\", top: \"-10px\", left: `80px`}}\r\n                          />\r\n                      </div>\r\n                      <div className='progress-step'>{step}</div>\r\n                   </div>\r\n                )\r\n            })}\r\n        </div>\r\n      </div>\r\n  )\r\n}\r\n\r\n//<div className='progress-bar-fill' style={{width: `${progress}%`, backgroundColor: getColor()}}></div>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}