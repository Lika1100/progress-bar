{"ast":null,"code":"const data = `\n2024\t0.86\t0.68\t1\t1\t1\t1\n2023\t0.84\t0.46\t0.37\t0.38\t0.31\t0.37\t0.63\t0.28\t0.87\t0.83\t1.11\t0.73\n2022\t0.99\t1.17\t7.61\t1.56\t0.12\t-0.35\t-0.39\t-0.52\t0.05\t0.18\t0.37\t0.78\n2021\t0.67\t0.78\t0.66\t0.58\t0.74\t0.69\t0.31\t0.17\t0.60\t1.11\t0.96\t0.82\n2020\t0.40\t0.33\t0.55\t0.83\t0.27\t0.22\t0.35\t-0.04\t-0.07\t0.43\t0.71\t0.83\n2019\t1.01\t0.44\t0.32\t0.29\t0.34\t0.04\t0.20\t-0.24\t-0.16\t0.13\t0.28\t0.36\n2018\t0.31\t0.21\t0.29\t0.38\t0.38\t0.49\t0.27\t0.01\t0.16\t0.35\t0.50\t0.84\n2017\t0.62\t0.22\t0.13\t0.33\t0.37\t0.61\t0.07\t-0.54\t-0.15\t0.20\t0.22\t0.42\n2016\t0.96\t0.63\t0.46\t0.44\t0.41\t0.36\t0.54\t0.01\t0.17\t0.43\t0.44\t0.40\n2015\t3.85\t2.22\t1.21\t0.46\t0.35\t0.19\t0.80\t0.35\t0.57\t0.74\t0.75\t0.77\n2014\t0.59\t0.70\t1.02\t0.90\t0.90\t0.62\t0.49\t0.24\t0.65\t0.82\t1.28\t2.62\n2013\t0.97\t0.56\t0.34\t0.51\t0.66\t0.42\t0.82\t0.14\t0.21\t0.57\t0.56\t0.51\n2012\t0.50\t0.37\t0.58\t0.31\t0.52\t0.89\t1.23\t0.10\t0.55\t0.46\t0.34\t0.54\n2011\t2.37\t0.78\t0.62\t0.43\t0.48\t0.23\t-0.01\t-0.24\t-0.04\t0.48\t0.42\t0.44\n2010\t1.64\t0.86\t0.63\t0.29\t0.50\t0.39\t0.36\t0.55\t0.84\t0.50\t0.81\t1.08\n2009\t2.37\t1.65\t1.31\t0.69\t0.57\t0.60\t0.63\t0.00\t-0.03\t0.00\t0.29\t0.41\n2008\t2.31\t1.20\t1.20\t1.42\t1.35\t0.97\t0.51\t0.36\t0.80\t0.91\t0.83\t0.69\n`;\nfunction convertTo(data) {\n  const rows = data.split(\"\\n\").filter(x => x.length > 0);\n  const obj = {};\n  for (const row of rows) {\n    const [year, ...months] = row.split(\"\\t\");\n    for (let i = 0; i < months.length; i++) {\n      obj[`${i + 1}.${year}`] = Number(months[i]);\n    }\n  }\n  const result = Object.entries(obj).map(([key, value]) => {\n    const [month, year] = key.split(\".\");\n    return {\n      month: +month,\n      year: +year,\n      index: String(value * 100)\n    };\n  });\n  return result;\n}\nexport const inflation = convertTo(data);","map":{"version":3,"names":["data","convertTo","rows","split","filter","x","length","obj","row","year","months","i","Number","result","Object","entries","map","key","value","month","index","String","inflation"],"sources":["C:/Users/Admin/Desktop/progress-bar/src/calculator/inflation.js"],"sourcesContent":["const data = `\r\n2024\t0.86\t0.68\t1\t1\t1\t1\r\n2023\t0.84\t0.46\t0.37\t0.38\t0.31\t0.37\t0.63\t0.28\t0.87\t0.83\t1.11\t0.73\r\n2022\t0.99\t1.17\t7.61\t1.56\t0.12\t-0.35\t-0.39\t-0.52\t0.05\t0.18\t0.37\t0.78\r\n2021\t0.67\t0.78\t0.66\t0.58\t0.74\t0.69\t0.31\t0.17\t0.60\t1.11\t0.96\t0.82\r\n2020\t0.40\t0.33\t0.55\t0.83\t0.27\t0.22\t0.35\t-0.04\t-0.07\t0.43\t0.71\t0.83\r\n2019\t1.01\t0.44\t0.32\t0.29\t0.34\t0.04\t0.20\t-0.24\t-0.16\t0.13\t0.28\t0.36\r\n2018\t0.31\t0.21\t0.29\t0.38\t0.38\t0.49\t0.27\t0.01\t0.16\t0.35\t0.50\t0.84\r\n2017\t0.62\t0.22\t0.13\t0.33\t0.37\t0.61\t0.07\t-0.54\t-0.15\t0.20\t0.22\t0.42\r\n2016\t0.96\t0.63\t0.46\t0.44\t0.41\t0.36\t0.54\t0.01\t0.17\t0.43\t0.44\t0.40\r\n2015\t3.85\t2.22\t1.21\t0.46\t0.35\t0.19\t0.80\t0.35\t0.57\t0.74\t0.75\t0.77\r\n2014\t0.59\t0.70\t1.02\t0.90\t0.90\t0.62\t0.49\t0.24\t0.65\t0.82\t1.28\t2.62\r\n2013\t0.97\t0.56\t0.34\t0.51\t0.66\t0.42\t0.82\t0.14\t0.21\t0.57\t0.56\t0.51\r\n2012\t0.50\t0.37\t0.58\t0.31\t0.52\t0.89\t1.23\t0.10\t0.55\t0.46\t0.34\t0.54\r\n2011\t2.37\t0.78\t0.62\t0.43\t0.48\t0.23\t-0.01\t-0.24\t-0.04\t0.48\t0.42\t0.44\r\n2010\t1.64\t0.86\t0.63\t0.29\t0.50\t0.39\t0.36\t0.55\t0.84\t0.50\t0.81\t1.08\r\n2009\t2.37\t1.65\t1.31\t0.69\t0.57\t0.60\t0.63\t0.00\t-0.03\t0.00\t0.29\t0.41\r\n2008\t2.31\t1.20\t1.20\t1.42\t1.35\t0.97\t0.51\t0.36\t0.80\t0.91\t0.83\t0.69\r\n`\r\n\r\nfunction convertTo(data) {\r\n  const rows = data.split(\"\\n\").filter((x) => x.length > 0)\r\n\r\n  const obj = {}\r\n  for (const row of rows) {\r\n    const [year, ...months] = row.split(\"\\t\");\r\n    for (let i = 0; i < months.length; i++) {\r\n      obj[`${i + 1}.${year}`] = Number(months[i])\r\n    }\r\n  }\r\n  const result = Object.entries(obj).map(([key, value]) => {\r\n      const [month, year] = key.split(\".\")\r\n      return {\r\n        month: +month,\r\n        year: +year,\r\n        index: String(value * 100)\r\n      }\r\n    })\r\n  return result\r\n}\r\n\r\nexport const inflation = convertTo(data)"],"mappings":"AAAA,MAAMA,IAAI,GAAI;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,SAASC,SAASA,CAACD,IAAI,EAAE;EACvB,MAAME,IAAI,GAAGF,IAAI,CAACG,KAAK,CAAC,IAAI,CAAC,CAACC,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACC,MAAM,GAAG,CAAC,CAAC;EAEzD,MAAMC,GAAG,GAAG,CAAC,CAAC;EACd,KAAK,MAAMC,GAAG,IAAIN,IAAI,EAAE;IACtB,MAAM,CAACO,IAAI,EAAE,GAAGC,MAAM,CAAC,GAAGF,GAAG,CAACL,KAAK,CAAC,IAAI,CAAC;IACzC,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,CAACJ,MAAM,EAAEK,CAAC,EAAE,EAAE;MACtCJ,GAAG,CAAE,GAAEI,CAAC,GAAG,CAAE,IAAGF,IAAK,EAAC,CAAC,GAAGG,MAAM,CAACF,MAAM,CAACC,CAAC,CAAC,CAAC;IAC7C;EACF;EACA,MAAME,MAAM,GAAGC,MAAM,CAACC,OAAO,CAACR,GAAG,CAAC,CAACS,GAAG,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAK;IACrD,MAAM,CAACC,KAAK,EAAEV,IAAI,CAAC,GAAGQ,GAAG,CAACd,KAAK,CAAC,GAAG,CAAC;IACpC,OAAO;MACLgB,KAAK,EAAE,CAACA,KAAK;MACbV,IAAI,EAAE,CAACA,IAAI;MACXW,KAAK,EAAEC,MAAM,CAACH,KAAK,GAAG,GAAG;IAC3B,CAAC;EACH,CAAC,CAAC;EACJ,OAAOL,MAAM;AACf;AAEA,OAAO,MAAMS,SAAS,GAAGrB,SAAS,CAACD,IAAI,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}