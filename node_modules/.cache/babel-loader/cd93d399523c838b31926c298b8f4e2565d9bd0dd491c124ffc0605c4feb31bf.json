{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\progress-bar\\\\src\\\\calculator\\\\MoscowExchange.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { inflation } from './inflation';\nimport \"./moscowExchange.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function MoscowExchange() {\n  _s();\n  const [indexDates, setIndexDates] = useState(null);\n  useEffect(() => {\n    fetch(\"./indices.csv\").then(r => r.text()).then(text => {\n      const data = text.split(\"\\n\").slice(1).map(line => {\n        const [date, index] = line.split(\",\");\n        return {\n          date,\n          index\n        };\n      });\n      setIndexDates(data);\n    });\n  }, []);\n  const startMonth = 5;\n  const startYear = 2014;\n  const contribution = 100000;\n\n  // https://www.youtube.com/watch?v=zJDtL-vfWfY\n\n  if (indexDates === null) {\n    return null;\n  }\n  console.log(groupData(indexDates, startMonth, startYear), \">\");\n  const data = groupData(indexDates, startMonth, startYear);\n  const result = [];\n  const startIndex = data[0].index;\n  let cumulativeInflation = 1;\n  for (const {\n    month,\n    year,\n    index\n  } of data) {\n    const currentBalance = contribution * index / startIndex;\n    cumulativeInflation *= 1 + inflation[`${month}.${year}`] / 100;\n    result.push({\n      month,\n      year,\n      currentBalance,\n      cumulativeInflation,\n      inflationAdjusted: contribution * cumulativeInflation //inflation[`${month}.${year}`]\n    });\n  }\n  console.table(result);\n  // for \n\n  // MM.YY  Balance  M/M  Total\n  // 05.21  100_000                \n  // 06.21  105_000  +5%    +5%\n  // 07.21   95_000  -9.5%  -5%      \n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"table\",\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"year\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"month\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"currentBalance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"cumulativeInflation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"inflationAdjusted\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: result.map(({\n        year,\n        month,\n        currentBalance,\n        cumulativeInflation,\n        inflationAdjusted\n      }) => {\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: year\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: month\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: currentBalance.toFixed()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: cumulativeInflation.toFixed(2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: inflationAdjusted.toFixed(2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(MoscowExchange, \"LSRywJoVSW1YF+JvTWGdjT9GfU8=\");\n_c = MoscowExchange;\nfunction groupData(indexDates, startMonth, startYear) {\n  const results = [];\n  while (true) {\n    const dateStart = `${startYear}-${startMonth.toString().padStart(2, \"0\")}`;\n    const startIndex = indexDates.find(({\n      date\n    }) => date.startsWith(dateStart));\n    if (startIndex === undefined) {\n      break;\n    }\n    results.push({\n      year: startYear,\n      month: startMonth,\n      index: startIndex.index\n    });\n    startMonth++;\n    if (startMonth > 12) {\n      startMonth = 1;\n      startYear++;\n    }\n  }\n  return results;\n  // return [\n  //   { month: 5, year: 2021, index },\n  //   { month, year, index },\n  //   { month, year, index },\n  //   { month: 3, year: 2024, index },\n  // ]\n}\nvar _c;\n$RefreshReg$(_c, \"MoscowExchange\");","map":{"version":3,"names":["React","useState","useEffect","inflation","jsxDEV","_jsxDEV","MoscowExchange","_s","indexDates","setIndexDates","fetch","then","r","text","data","split","slice","map","line","date","index","startMonth","startYear","contribution","console","log","groupData","result","startIndex","cumulativeInflation","month","year","currentBalance","push","inflationAdjusted","table","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","_c","results","dateStart","toString","padStart","find","startsWith","undefined","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/progress-bar/src/calculator/MoscowExchange.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { inflation } from './inflation';\r\nimport \"./moscowExchange.css\"\r\n\r\nexport function MoscowExchange() {\r\n  const [indexDates, setIndexDates] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch(\"./indices.csv\").then(r => r.text()).then(text => {\r\n      const data = text.split(\"\\n\").slice(1).map(line => {\r\n        const [date, index] = line.split(\",\");\r\n        return { date, index };\r\n      });\r\n      setIndexDates(data);\r\n    });\r\n  }, []);\r\n\r\n  const startMonth = 5;\r\n  const startYear = 2014;\r\n\r\n  const contribution = 100_000;\r\n\r\n  // https://www.youtube.com/watch?v=zJDtL-vfWfY\r\n  \r\n\r\n  if (indexDates === null) {\r\n    return null;\r\n  }\r\n\r\n  \r\n\r\n  console.log(groupData(indexDates, startMonth, startYear), \">\")\r\n  const data = groupData(indexDates, startMonth, startYear)\r\n\r\n  const result = []\r\n  const startIndex = data[0].index;\r\n\r\n  let cumulativeInflation = 1;\r\n\r\n  for (const { month, year, index} of data) {\r\n    const currentBalance = contribution * index / startIndex\r\n    cumulativeInflation *= 1 + inflation[`${month}.${year}`]/100\r\n    result.push({\r\n      month,\r\n      year,\r\n      currentBalance,\r\n      cumulativeInflation,\r\n      inflationAdjusted: contribution * cumulativeInflation//inflation[`${month}.${year}`]\r\n    })\r\n  }\r\n\r\n  console.table(result)\r\n  // for \r\n\r\n  // MM.YY  Balance  M/M  Total\r\n  // 05.21  100_000                \r\n  // 06.21  105_000  +5%    +5%\r\n  // 07.21   95_000  -9.5%  -5%      \r\n\r\n  return (\r\n    <table className='table'>\r\n      <thead>\r\n        <tr>\r\n          <th>\r\n            year\r\n          </th>\r\n          <th>\r\n              month\r\n          </th>\r\n          <th>\r\n              currentBalance\r\n          </th>\r\n          <th>\r\n              cumulativeInflation\r\n          </th>\r\n          <th>\r\n              inflationAdjusted\r\n          </th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {result.map(({year, month, currentBalance, cumulativeInflation, inflationAdjusted}) => {\r\n          return (\r\n            <tr>\r\n              <td>\r\n                {year}\r\n              </td>\r\n              <td>\r\n                {month}\r\n              </td>\r\n              <td>\r\n                {currentBalance.toFixed()}\r\n              </td>\r\n              <td>\r\n                {cumulativeInflation.toFixed(2)}\r\n              </td>\r\n              <td>\r\n                {inflationAdjusted.toFixed(2)}\r\n              </td>\r\n            </tr>\r\n          )\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nfunction groupData(indexDates, startMonth, startYear) {\r\n  const results = []\r\n  while(true) {\r\n    const dateStart = `${startYear}-${startMonth.toString().padStart(2, \"0\")}`\r\n    const startIndex = indexDates.find(({date}) => date.startsWith(dateStart))\r\n    if (startIndex === undefined) {\r\n      break\r\n    }\r\n    results.push({\r\n      year: startYear,\r\n      month: startMonth,\r\n      index: startIndex.index\r\n    })\r\n    startMonth++\r\n    if (startMonth > 12) {\r\n      startMonth = 1\r\n      startYear++\r\n    }\r\n  }\r\n  return results\r\n  // return [\r\n  //   { month: 5, year: 2021, index },\r\n  //   { month, year, index },\r\n  //   { month, year, index },\r\n  //   { month: 3, year: 2024, index },\r\n  // ]\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}