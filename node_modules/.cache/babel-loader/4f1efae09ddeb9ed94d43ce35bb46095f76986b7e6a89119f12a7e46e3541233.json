{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\progress-bar\\\\src\\\\calculator\\\\MoscowExchange.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { inflation } from './inflation';\nimport \"./moscowExchange.css\";\nimport { getData } from './domain/getData';\nimport { formatNum } from './domain/formatNum';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nconst years = [2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024];\n\n// посчитать инфлянцию как индекс\n// нарисовать рядом\n// посчитать на сколько % акции опережают не акции\n\n// 0       +   100_000   +10%  → 110_000\n// 110_000 +   100_000   -20%  → 168_000\n// 168_000 +   100_000   +30%  → 348_400\n//\n\nexport function MoscowExchange() {\n  _s();\n  const [indexDates, setIndexDates] = useState(null);\n  const [chosenMonth, setChosenMonth] = useState(5);\n  const [chosenYear, setChosenYear] = useState(2014);\n  useEffect(() => {\n    fetch(\"./indices.csv\").then(r => r.text()).then(text => {\n      const data = text.split(\"\\n\").slice(1).map(line => {\n        const [date, index] = line.split(\",\");\n        return {\n          date,\n          index\n        };\n      });\n      setIndexDates(data);\n    });\n  }, []);\n  const startMonth = chosenMonth;\n  const startYear = chosenYear;\n\n  // https://www.youtube.com/watch?v=zJDtL-vfWfY\n\n  if (indexDates === null) {\n    return null;\n  }\n  const data = groupData(indexDates, startMonth, startYear);\n  const inflationData = groupData(inflation, startMonth, startYear);\n  const result = getData(data, 100000);\n  const resultInflation = getData(inflationData, 100000);\n  //const resultInflation = getData(inflationData, 100_000)\n  //console.table(resultInflation)\n\n  // for \n\n  // MM.YY  Balance  M/M  Total\n  // 05.21  100_000                \n  // 06.21  105_000  +5%    +5%\n  // 07.21   95_000  -9.5%  -5%      \n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrap\",\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      value: chosenMonth,\n      onChange: e => setChosenMonth(e.target.value),\n      children: months.map(month => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: month,\n          children: month\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: chosenYear,\n      onChange: e => setChosenYear(e.target.value),\n      children: years.map(year => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          children: year\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"year\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"month\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"current balance\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"inflation adjusted\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"difference\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: result.map(({\n          year,\n          month,\n          currentBalance\n        }, i) => {\n          const inflationAdjusted = resultInflation[i].currentBalance;\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: year\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: month\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: formatNum(currentBalance.toString())\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: formatNum(inflationAdjusted.toString())\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(MoscowExchange, \"I1gYpXn6+z+lfqoGtcqNGXdU4zI=\");\n_c = MoscowExchange;\nfunction groupData(indexDates, startMonth, startYear) {\n  const results = [];\n  while (true) {\n    const dateStart = `${startYear}-${startMonth.toString().padStart(2, \"0\")}`;\n    const startIndex = indexDates.find(({\n      date,\n      index\n    }) => date.startsWith(dateStart) && index > 0);\n    if (startIndex === undefined) {\n      break;\n    }\n    results.push({\n      year: startYear,\n      month: startMonth,\n      index: startIndex.index\n    });\n    startMonth++;\n    if (startMonth > 12) {\n      startMonth = 1;\n      startYear++;\n    }\n  }\n  return results;\n  // return [\n  //   { month: 5, year: 2021, index },\n  //   { month, year, index },\n  //   { month, year, index },\n  //   { month: 3, year: 2024, index },\n  // ]\n}\nvar _c;\n$RefreshReg$(_c, \"MoscowExchange\");","map":{"version":3,"names":["React","useState","useEffect","inflation","getData","formatNum","jsxDEV","_jsxDEV","months","years","MoscowExchange","_s","indexDates","setIndexDates","chosenMonth","setChosenMonth","chosenYear","setChosenYear","fetch","then","r","text","data","split","slice","map","line","date","index","startMonth","startYear","groupData","inflationData","result","resultInflation","className","children","value","onChange","e","target","month","fileName","_jsxFileName","lineNumber","columnNumber","year","currentBalance","i","inflationAdjusted","toString","_c","results","dateStart","padStart","startIndex","find","startsWith","undefined","push","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/progress-bar/src/calculator/MoscowExchange.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { inflation } from './inflation';\r\nimport \"./moscowExchange.css\";\r\nimport { getData } from './domain/getData';\r\nimport { formatNum } from './domain/formatNum';\r\n\r\nconst months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\r\nconst years = [2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024]\r\n\r\n\r\n// посчитать инфлянцию как индекс\r\n// нарисовать рядом\r\n// посчитать на сколько % акции опережают не акции\r\n\r\n// 0       +   100_000   +10%  → 110_000\r\n// 110_000 +   100_000   -20%  → 168_000\r\n// 168_000 +   100_000   +30%  → 348_400\r\n//\r\n\r\nexport function MoscowExchange() {\r\n  const [indexDates, setIndexDates] = useState(null);\r\n  const [chosenMonth, setChosenMonth] = useState(5);\r\n  const [chosenYear, setChosenYear] = useState(2014)\r\n\r\n  useEffect(() => {\r\n    fetch(\"./indices.csv\").then(r => r.text()).then(text => {\r\n      const data = text.split(\"\\n\").slice(1).map(line => {\r\n        const [date, index] = line.split(\",\");\r\n        return { date, index };\r\n      });\r\n      setIndexDates(data);\r\n    });\r\n  }, []);\r\n\r\n  const startMonth = chosenMonth;\r\n  const startYear = chosenYear; \r\n\r\n  // https://www.youtube.com/watch?v=zJDtL-vfWfY\r\n\r\n  if (indexDates === null) {\r\n    return null;\r\n  }\r\n\r\n  const data = groupData(indexDates, startMonth, startYear)\r\n  const inflationData = groupData(inflation, startMonth, startYear)\r\n  \r\n  const result = getData(data, 100_000)\r\n  const resultInflation = getData(inflationData, 100_000)\r\n  //const resultInflation = getData(inflationData, 100_000)\r\n  //console.table(resultInflation)\r\n\r\n  // for \r\n\r\n  // MM.YY  Balance  M/M  Total\r\n  // 05.21  100_000                \r\n  // 06.21  105_000  +5%    +5%\r\n  // 07.21   95_000  -9.5%  -5%      \r\n\r\n  return (\r\n    <div className='wrap'>\r\n    <select value={chosenMonth} onChange={e => setChosenMonth(e.target.value)}>\r\n      {months.map((month) => {\r\n        return (\r\n          <option value={month}>{month}</option>\r\n        )\r\n      })}\r\n    </select>\r\n    <select value={chosenYear} onChange={e => setChosenYear(e.target.value)}>\r\n      {years.map((year) => {\r\n        return (\r\n          <option>{year}</option>\r\n        )\r\n      })}\r\n    </select>\r\n      <table className='table'>\r\n      <thead>\r\n        <tr>\r\n          <th>\r\n            year\r\n          </th>\r\n          <th>\r\n              month\r\n          </th>\r\n          <th>\r\n              current balance\r\n          </th>\r\n          <th>\r\n              inflation adjusted\r\n          </th>\r\n          <th>\r\n              difference\r\n          </th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {result.map(({year, month, currentBalance}, i) => {\r\n          const inflationAdjusted = resultInflation[i].currentBalance\r\n          return (\r\n            <tr>\r\n              <td>\r\n                {year}\r\n              </td>\r\n              <td>\r\n                {month}\r\n              </td>\r\n              <td>\r\n                {formatNum(currentBalance.toString())}\r\n              </td>\r\n              <td>\r\n                {formatNum(inflationAdjusted.toString())}\r\n              </td>\r\n              \r\n            </tr>\r\n          )\r\n        })}\r\n      </tbody>\r\n    </table>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction groupData(indexDates, startMonth, startYear) {\r\n  const results = []\r\n  while(true) {\r\n    const dateStart = `${startYear}-${startMonth.toString().padStart(2, \"0\")}`\r\n    const startIndex = indexDates.find(({date, index}) => date.startsWith(dateStart) && index > 0)\r\n\r\n    if (startIndex === undefined) {\r\n      break\r\n    }\r\n\r\n    results.push({\r\n      year: startYear,\r\n      month: startMonth,\r\n      index: startIndex.index\r\n    })\r\n    startMonth++\r\n    if (startMonth > 12) {\r\n      startMonth = 1\r\n      startYear++\r\n    }\r\n  }\r\n  return results\r\n  // return [\r\n  //   { month: 5, year: 2021, index },\r\n  //   { month, year, index },\r\n  //   { month, year, index },\r\n  //   { month: 3, year: 2024, index },\r\n  // ]\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,aAAa;AACvC,OAAO,sBAAsB;AAC7B,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,SAASC,SAAS,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;AACtD,MAAMC,KAAK,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;;AAGtF;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EAC/B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACe,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAElDC,SAAS,CAAC,MAAM;IACdgB,KAAK,CAAC,eAAe,CAAC,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAACF,IAAI,CAACE,IAAI,IAAI;MACtD,MAAMC,IAAI,GAAGD,IAAI,CAACE,KAAK,CAAC,IAAI,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,GAAG,CAACC,IAAI,IAAI;QACjD,MAAM,CAACC,IAAI,EAAEC,KAAK,CAAC,GAAGF,IAAI,CAACH,KAAK,CAAC,GAAG,CAAC;QACrC,OAAO;UAAEI,IAAI;UAAEC;QAAM,CAAC;MACxB,CAAC,CAAC;MACFf,aAAa,CAACS,IAAI,CAAC;IACrB,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMO,UAAU,GAAGf,WAAW;EAC9B,MAAMgB,SAAS,GAAGd,UAAU;;EAE5B;;EAEA,IAAIJ,UAAU,KAAK,IAAI,EAAE;IACvB,OAAO,IAAI;EACb;EAEA,MAAMU,IAAI,GAAGS,SAAS,CAACnB,UAAU,EAAEiB,UAAU,EAAEC,SAAS,CAAC;EACzD,MAAME,aAAa,GAAGD,SAAS,CAAC5B,SAAS,EAAE0B,UAAU,EAAEC,SAAS,CAAC;EAEjE,MAAMG,MAAM,GAAG7B,OAAO,CAACkB,IAAI,EAAE,MAAO,CAAC;EACrC,MAAMY,eAAe,GAAG9B,OAAO,CAAC4B,aAAa,EAAE,MAAO,CAAC;EACvD;EACA;;EAEA;;EAEA;EACA;EACA;EACA;;EAEA,oBACEzB,OAAA;IAAK4B,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACrB7B,OAAA;MAAQ8B,KAAK,EAAEvB,WAAY;MAACwB,QAAQ,EAAEC,CAAC,IAAIxB,cAAc,CAACwB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAAAD,QAAA,EACvE5B,MAAM,CAACiB,GAAG,CAAEgB,KAAK,IAAK;QACrB,oBACElC,OAAA;UAAQ8B,KAAK,EAAEI,KAAM;UAAAL,QAAA,EAAEK;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC;MAE1C,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI,CAAC,eACTtC,OAAA;MAAQ8B,KAAK,EAAErB,UAAW;MAACsB,QAAQ,EAAEC,CAAC,IAAItB,aAAa,CAACsB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAAAD,QAAA,EACrE3B,KAAK,CAACgB,GAAG,CAAEqB,IAAI,IAAK;QACnB,oBACEvC,OAAA;UAAA6B,QAAA,EAASU;QAAI;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC;MAE3B,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI,CAAC,eACPtC,OAAA;MAAO4B,SAAS,EAAC,OAAO;MAAAC,QAAA,gBACxB7B,OAAA;QAAA6B,QAAA,eACE7B,OAAA;UAAA6B,QAAA,gBACE7B,OAAA;YAAA6B,QAAA,EAAI;UAEJ;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACLtC,OAAA;YAAA6B,QAAA,EAAI;UAEJ;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACLtC,OAAA;YAAA6B,QAAA,EAAI;UAEJ;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACLtC,OAAA;YAAA6B,QAAA,EAAI;UAEJ;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACLtC,OAAA;YAAA6B,QAAA,EAAI;UAEJ;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACRtC,OAAA;QAAA6B,QAAA,EACGH,MAAM,CAACR,GAAG,CAAC,CAAC;UAACqB,IAAI;UAAEL,KAAK;UAAEM;QAAc,CAAC,EAAEC,CAAC,KAAK;UAChD,MAAMC,iBAAiB,GAAGf,eAAe,CAACc,CAAC,CAAC,CAACD,cAAc;UAC3D,oBACExC,OAAA;YAAA6B,QAAA,gBACE7B,OAAA;cAAA6B,QAAA,EACGU;YAAI;cAAAJ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC,eACLtC,OAAA;cAAA6B,QAAA,EACGK;YAAK;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACJ,CAAC,eACLtC,OAAA;cAAA6B,QAAA,EACG/B,SAAS,CAAC0C,cAAc,CAACG,QAAQ,CAAC,CAAC;YAAC;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACnC,CAAC,eACLtC,OAAA;cAAA6B,QAAA,EACG/B,SAAS,CAAC4C,iBAAiB,CAACC,QAAQ,CAAC,CAAC;YAAC;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACtC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEH,CAAC;QAET,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAClC,EAAA,CApGeD,cAAc;AAAAyC,EAAA,GAAdzC,cAAc;AAsG9B,SAASqB,SAASA,CAACnB,UAAU,EAAEiB,UAAU,EAAEC,SAAS,EAAE;EACpD,MAAMsB,OAAO,GAAG,EAAE;EAClB,OAAM,IAAI,EAAE;IACV,MAAMC,SAAS,GAAI,GAAEvB,SAAU,IAAGD,UAAU,CAACqB,QAAQ,CAAC,CAAC,CAACI,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,EAAC;IAC1E,MAAMC,UAAU,GAAG3C,UAAU,CAAC4C,IAAI,CAAC,CAAC;MAAC7B,IAAI;MAAEC;IAAK,CAAC,KAAKD,IAAI,CAAC8B,UAAU,CAACJ,SAAS,CAAC,IAAIzB,KAAK,GAAG,CAAC,CAAC;IAE9F,IAAI2B,UAAU,KAAKG,SAAS,EAAE;MAC5B;IACF;IAEAN,OAAO,CAACO,IAAI,CAAC;MACXb,IAAI,EAAEhB,SAAS;MACfW,KAAK,EAAEZ,UAAU;MACjBD,KAAK,EAAE2B,UAAU,CAAC3B;IACpB,CAAC,CAAC;IACFC,UAAU,EAAE;IACZ,IAAIA,UAAU,GAAG,EAAE,EAAE;MACnBA,UAAU,GAAG,CAAC;MACdC,SAAS,EAAE;IACb;EACF;EACA,OAAOsB,OAAO;EACd;EACA;EACA;EACA;EACA;EACA;AACF;AAAC,IAAAD,EAAA;AAAAS,YAAA,CAAAT,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}