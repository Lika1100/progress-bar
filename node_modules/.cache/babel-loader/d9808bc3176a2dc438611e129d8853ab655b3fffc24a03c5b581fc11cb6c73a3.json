{"ast":null,"code":"import { inflation } from \"../inflation\";\nexport function getData(data, contribution, inflationData) {\n  const result = [];\n  let cumulativeInflation = 1;\n  let currentBalance = 0;\n  result.push({\n    month: data[0].month,\n    year: data[0].year,\n    currentBalance\n  });\n  for (let i = 1; i < data.length; i++) {\n    const {\n      month,\n      year\n    } = data[i];\n    const monthOnMonthGrowth = data[i].index / data[i - 1].index;\n    const inflationOnMonthGrowth = Object.entries(inflation).map(([key, value]) => {\n      console.log(key, value);\n      const [year, month] = key.split(\".\");\n    });\n    currentBalance += contribution;\n    currentBalance *= monthOnMonthGrowth;\n\n    // 100_000 * 1.1 = 110_000\n    /* cumulativeInflation *= 1 + inflation[`${month}.${year}`]/100 */\n    result.push({\n      month,\n      year,\n      currentBalance: Math.round(currentBalance),\n      cumulativeInflation,\n      inflationAdjusted: contribution * cumulativeInflation\n    });\n  }\n  return result;\n}","map":{"version":3,"names":["inflation","getData","data","contribution","inflationData","result","cumulativeInflation","currentBalance","push","month","year","i","length","monthOnMonthGrowth","index","inflationOnMonthGrowth","Object","entries","map","key","value","console","log","split","Math","round","inflationAdjusted"],"sources":["C:/Users/Admin/Desktop/progress-bar/src/calculator/domain/getData.js"],"sourcesContent":["import { inflation } from \"../inflation\";\r\n\r\nexport function getData(data, contribution, inflationData) {\r\n    const result = [];\r\n    \r\n    let cumulativeInflation = 1;\r\n    let currentBalance = 0;\r\n  \r\n    result.push( {month: data[0].month, year: data[0].year, currentBalance} )\r\n    \r\n    for (let i = 1; i < data.length; i++) {\r\n      const { month, year } = data[i];\r\n      const monthOnMonthGrowth = data[i].index / data[i - 1].index;\r\n      const inflationOnMonthGrowth = Object.entries(inflation).map(([key, value]) => {\r\n        console.log(key, value)\r\n        const [year, month] = key.split(\".\")\r\n      })\r\n      currentBalance += contribution;\r\n      currentBalance *= monthOnMonthGrowth;\r\n      \r\n      // 100_000 * 1.1 = 110_000\r\n      /* cumulativeInflation *= 1 + inflation[`${month}.${year}`]/100 */\r\n      result.push({\r\n        month,\r\n        year,\r\n        currentBalance: Math.round(currentBalance),\r\n        cumulativeInflation,\r\n        inflationAdjusted: contribution * cumulativeInflation,\r\n      })\r\n    }\r\n\r\n    return result\r\n  }"],"mappings":"AAAA,SAASA,SAAS,QAAQ,cAAc;AAExC,OAAO,SAASC,OAAOA,CAACC,IAAI,EAAEC,YAAY,EAAEC,aAAa,EAAE;EACvD,MAAMC,MAAM,GAAG,EAAE;EAEjB,IAAIC,mBAAmB,GAAG,CAAC;EAC3B,IAAIC,cAAc,GAAG,CAAC;EAEtBF,MAAM,CAACG,IAAI,CAAE;IAACC,KAAK,EAAEP,IAAI,CAAC,CAAC,CAAC,CAACO,KAAK;IAAEC,IAAI,EAAER,IAAI,CAAC,CAAC,CAAC,CAACQ,IAAI;IAAEH;EAAc,CAAE,CAAC;EAEzE,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,IAAI,CAACU,MAAM,EAAED,CAAC,EAAE,EAAE;IACpC,MAAM;MAAEF,KAAK;MAAEC;IAAK,CAAC,GAAGR,IAAI,CAACS,CAAC,CAAC;IAC/B,MAAME,kBAAkB,GAAGX,IAAI,CAACS,CAAC,CAAC,CAACG,KAAK,GAAGZ,IAAI,CAACS,CAAC,GAAG,CAAC,CAAC,CAACG,KAAK;IAC5D,MAAMC,sBAAsB,GAAGC,MAAM,CAACC,OAAO,CAACjB,SAAS,CAAC,CAACkB,GAAG,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAK;MAC7EC,OAAO,CAACC,GAAG,CAACH,GAAG,EAAEC,KAAK,CAAC;MACvB,MAAM,CAACV,IAAI,EAAED,KAAK,CAAC,GAAGU,GAAG,CAACI,KAAK,CAAC,GAAG,CAAC;IACtC,CAAC,CAAC;IACFhB,cAAc,IAAIJ,YAAY;IAC9BI,cAAc,IAAIM,kBAAkB;;IAEpC;IACA;IACAR,MAAM,CAACG,IAAI,CAAC;MACVC,KAAK;MACLC,IAAI;MACJH,cAAc,EAAEiB,IAAI,CAACC,KAAK,CAAClB,cAAc,CAAC;MAC1CD,mBAAmB;MACnBoB,iBAAiB,EAAEvB,YAAY,GAAGG;IACpC,CAAC,CAAC;EACJ;EAEA,OAAOD,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}