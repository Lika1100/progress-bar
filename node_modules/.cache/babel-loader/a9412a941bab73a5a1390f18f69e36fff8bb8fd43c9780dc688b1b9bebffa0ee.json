{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\progress-bar\\\\src\\\\calculator\\\\MoscowExchange.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { inflation } from './inflation';\nimport \"./moscowExchange.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nconst years = [2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024];\nexport function getData(data, contribution) {\n  const result = [];\n  let cumulativeInflation = 1;\n  let currentBalance = 0;\n  result.push({\n    month: data[0].month,\n    year: data[0].year,\n    currentBalance\n  });\n  for (let i = 1; i < data.length; i++) {\n    const {\n      month,\n      year\n    } = data[i];\n    const monthOnMonthGrowth = data[i].index / data[i - 1].index;\n    const inflationOnGrow = currentBalance += contribution;\n    currentBalance *= monthOnMonthGrowth;\n\n    // 100_000 * 1.1 = 110_000\n    cumulativeInflation *= 1 + inflation[`${month}.${year}`] / 100;\n    result.push({\n      month,\n      year,\n      currentBalance: Math.round(currentBalance),\n      cumulativeInflation,\n      inflationAdjusted: contribution * cumulativeInflation\n    });\n  }\n  return result;\n}\n\n// посчитать инфлянцию как индекс\n// нарисовать рядом\n// посчитать на сколько % акции опережают не акции\n\n// 0       +   100_000   +10%  → 110_000\n// 110_000 +   100_000   -20%  → 168_000\n// 168_000 +   100_000   +30%  → 348_400\n//\n\nexport function MoscowExchange() {\n  _s();\n  const [indexDates, setIndexDates] = useState(null);\n  const [chosenMonth, setChosenMonth] = useState(5);\n  const [chosenYear, setChosenYear] = useState(2014);\n  useEffect(() => {\n    fetch(\"./indices.csv\").then(r => r.text()).then(text => {\n      const data = text.split(\"\\n\").slice(1).map(line => {\n        const [date, index] = line.split(\",\");\n        return {\n          date,\n          index\n        };\n      });\n      setIndexDates(data);\n    });\n  }, []);\n  const startMonth = chosenMonth;\n  const startYear = chosenYear;\n\n  // https://www.youtube.com/watch?v=zJDtL-vfWfY\n  console.log(inflation, \"??\");\n  if (indexDates === null) {\n    return null;\n  }\n  console.log(groupData(indexDates, startMonth, startYear), \">\");\n  const data = groupData(indexDates, startMonth, startYear);\n  const result = getData(data, 100000);\n  console.table(result);\n  // for \n\n  // MM.YY  Balance  M/M  Total\n  // 05.21  100_000                \n  // 06.21  105_000  +5%    +5%\n  // 07.21   95_000  -9.5%  -5%      \n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrap\",\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      value: chosenMonth,\n      onChange: e => setChosenMonth(e.target.value),\n      children: months.map(month => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: month,\n          children: month\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: chosenYear,\n      onChange: e => setChosenYear(e.target.value),\n      children: years.map(year => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          children: year\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"year\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"month\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"current balance\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"cumulative inflation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"inflation adjusted\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"balance\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: result.map(({\n          year,\n          month,\n          currentBalance,\n          cumulativeInflation,\n          inflationAdjusted\n        }) => {\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: year\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: month\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: currentBalance\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: cumulativeInflation\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: inflationAdjusted\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(MoscowExchange, \"I1gYpXn6+z+lfqoGtcqNGXdU4zI=\");\n_c = MoscowExchange;\nfunction groupData(indexDates, startMonth, startYear) {\n  const results = [];\n  while (true) {\n    const dateStart = `${startYear}-${startMonth.toString().padStart(2, \"0\")}`;\n    const startIndex = indexDates.find(({\n      date,\n      index\n    }) => date.startsWith(dateStart) && index > 0);\n    if (startIndex === undefined) {\n      break;\n    }\n    results.push({\n      year: startYear,\n      month: startMonth,\n      index: startIndex.index\n    });\n    startMonth++;\n    if (startMonth > 12) {\n      startMonth = 1;\n      startYear++;\n    }\n  }\n  return results;\n  // return [\n  //   { month: 5, year: 2021, index },\n  //   { month, year, index },\n  //   { month, year, index },\n  //   { month: 3, year: 2024, index },\n  // ]\n}\nvar _c;\n$RefreshReg$(_c, \"MoscowExchange\");","map":{"version":3,"names":["React","useState","useEffect","inflation","jsxDEV","_jsxDEV","months","years","getData","data","contribution","result","cumulativeInflation","currentBalance","push","month","year","i","length","monthOnMonthGrowth","index","inflationOnGrow","Math","round","inflationAdjusted","MoscowExchange","_s","indexDates","setIndexDates","chosenMonth","setChosenMonth","chosenYear","setChosenYear","fetch","then","r","text","split","slice","map","line","date","startMonth","startYear","console","log","groupData","table","className","children","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","_c","results","dateStart","toString","padStart","startIndex","find","startsWith","undefined","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/progress-bar/src/calculator/MoscowExchange.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { inflation } from './inflation';\r\nimport \"./moscowExchange.css\";\r\n\r\nconst months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\r\nconst years = [2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024]\r\nexport function getData(data, contribution) {\r\n  const result = []\r\n\r\n  let cumulativeInflation = 1;\r\n  let currentBalance = 0;\r\n\r\n  result.push( {month: data[0].month, year: data[0].year, currentBalance} )\r\n\r\n  for (let i = 1; i < data.length; i++) {\r\n    const { month, year } = data[i]\r\n    const monthOnMonthGrowth = data[i].index / data[i - 1].index;\r\n    const inflationOnGrow = \r\n    currentBalance += contribution;\r\n    currentBalance *= monthOnMonthGrowth;\r\n    \r\n    // 100_000 * 1.1 = 110_000\r\n    cumulativeInflation *= 1 + inflation[`${month}.${year}`]/100\r\n    result.push({\r\n      month,\r\n      year,\r\n      currentBalance: Math.round(currentBalance),\r\n      cumulativeInflation,\r\n      inflationAdjusted: contribution * cumulativeInflation,\r\n    })\r\n  }\r\n  return result\r\n}\r\n\r\n// посчитать инфлянцию как индекс\r\n// нарисовать рядом\r\n// посчитать на сколько % акции опережают не акции\r\n\r\n// 0       +   100_000   +10%  → 110_000\r\n// 110_000 +   100_000   -20%  → 168_000\r\n// 168_000 +   100_000   +30%  → 348_400\r\n//\r\n\r\nexport function MoscowExchange() {\r\n  const [indexDates, setIndexDates] = useState(null);\r\n  const [chosenMonth, setChosenMonth] = useState(5);\r\n  const [chosenYear, setChosenYear] = useState(2014)\r\n\r\n  useEffect(() => {\r\n    fetch(\"./indices.csv\").then(r => r.text()).then(text => {\r\n      const data = text.split(\"\\n\").slice(1).map(line => {\r\n        const [date, index] = line.split(\",\");\r\n        return { date, index };\r\n      });\r\n      setIndexDates(data);\r\n    });\r\n  }, []);\r\n\r\n  const startMonth = chosenMonth;\r\n  const startYear = chosenYear; \r\n\r\n  // https://www.youtube.com/watch?v=zJDtL-vfWfY\r\n  console.log(inflation, \"??\")\r\n\r\n  if (indexDates === null) {\r\n    return null;\r\n  }\r\n\r\n  console.log(groupData(indexDates, startMonth, startYear), \">\")\r\n  const data = groupData(indexDates, startMonth, startYear)\r\n\r\n  const result = getData(data, 100_000)\r\n\r\n  console.table(result)\r\n  // for \r\n\r\n  // MM.YY  Balance  M/M  Total\r\n  // 05.21  100_000                \r\n  // 06.21  105_000  +5%    +5%\r\n  // 07.21   95_000  -9.5%  -5%      \r\n\r\n  return (\r\n    <div className='wrap'>\r\n    <select value={chosenMonth} onChange={e => setChosenMonth(e.target.value)}>\r\n      {months.map((month) => {\r\n        return (\r\n          <option value={month}>{month}</option>\r\n        )\r\n      })}\r\n    </select>\r\n    <select value={chosenYear} onChange={e => setChosenYear(e.target.value)}>\r\n      {years.map((year) => {\r\n        return (\r\n          <option>{year}</option>\r\n        )\r\n      })}\r\n    </select>\r\n      <table className='table'>\r\n      <thead>\r\n        <tr>\r\n          <th>\r\n            year\r\n          </th>\r\n          <th>\r\n              month\r\n          </th>\r\n          <th>\r\n              current balance\r\n          </th>\r\n          <th>\r\n              cumulative inflation\r\n          </th>\r\n          <th>\r\n              inflation adjusted\r\n          </th>\r\n          <th>\r\n            balance\r\n          </th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {result.map(({year, month, currentBalance, cumulativeInflation, inflationAdjusted}) => {\r\n          \r\n          return (\r\n            <tr>\r\n              <td>\r\n                {year}\r\n              </td>\r\n              <td>\r\n                {month}\r\n              </td>\r\n              <td>\r\n                {currentBalance}\r\n              </td>\r\n              <td>\r\n                {cumulativeInflation}\r\n              </td>\r\n              <td>\r\n                {inflationAdjusted}\r\n              </td>\r\n              <td>\r\n                \r\n              </td>\r\n            </tr>\r\n          )\r\n        })}\r\n      </tbody>\r\n    </table>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction groupData(indexDates, startMonth, startYear) {\r\n  const results = []\r\n  while(true) {\r\n    const dateStart = `${startYear}-${startMonth.toString().padStart(2, \"0\")}`\r\n    const startIndex = indexDates.find(({date, index}) => date.startsWith(dateStart) && index > 0)\r\n\r\n    if (startIndex === undefined) {\r\n      break\r\n    }\r\n\r\n    results.push({\r\n      year: startYear,\r\n      month: startMonth,\r\n      index: startIndex.index\r\n    })\r\n    startMonth++\r\n    if (startMonth > 12) {\r\n      startMonth = 1\r\n      startYear++\r\n    }\r\n  }\r\n  return results\r\n  // return [\r\n  //   { month: 5, year: 2021, index },\r\n  //   { month, year, index },\r\n  //   { month, year, index },\r\n  //   { month: 3, year: 2024, index },\r\n  // ]\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}