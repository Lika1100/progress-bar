{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\progress-bar\\\\src\\\\progressBar\\\\ProgressBar.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport \"./progressBar.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ProgressBar({\n  thresholds,\n  value\n}) {\n  _s();\n  const [progress, setProgress] = useState(value);\n  // [25, 50, 100, 200, 500, 1000]\n  const getColor = () => {\n    return \"violet\";\n  };\n  const widthOfOneEl = 100 / thresholds.length;\n  function calcWidth(value, arr) {\n    if (arr.includes(value)) {\n      return arr.indexOf(value) + 1;\n    }\n    const indexElAfterValue = arr.findIndex(x => value < x);\n    console.log(indexElAfterValue, \">>>\");\n    const nextElAfterValue = arr[indexElAfterValue];\n    const prevElementBeforeValue = arr[indexElAfterValue - 1] === undefined ? 0 : arr[indexElAfterValue - 1];\n    const stepBetween = nextElAfterValue - prevElementBeforeValue;\n    const deference = nextElAfterValue - value;\n    const remainder = stepBetween / deference;\n    const result = indexElAfterValue + remainder - 1;\n    console.log(stepBetween, \"??\");\n    return result;\n  }\n  console.log(calcWidth(75, thresholds));\n  const k = calcWidth(value, thresholds);\n  console.log(k);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar\",\n      children: [thresholds.map((step, i) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-step\",\n          style: {\n            background: \"grey\",\n            height: \"30px\",\n            width: `${widthOfOneEl}%`,\n            display: \"inline-block\"\n          },\n          children: [\"\\u2729\", step]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-fill\",\n        style: {\n          width: `${widthOfOneEl * k}%`,\n          display: \"inline-block\"\n        },\n        children: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 14\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-label\",\n      children: progress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"progress\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n//<div className='progress-bar-fill' style={{width: `${progress}%`, backgroundColor: getColor()}}></div>\n_s(ProgressBar, \"naLTzwwGAM0g/JVfGXEZ4LabJ9c=\");\n_c = ProgressBar;\nvar _c;\n$RefreshReg$(_c, \"ProgressBar\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ProgressBar","thresholds","value","_s","progress","setProgress","getColor","widthOfOneEl","length","calcWidth","arr","includes","indexOf","indexElAfterValue","findIndex","x","console","log","nextElAfterValue","prevElementBeforeValue","undefined","stepBetween","deference","remainder","result","k","className","children","map","step","i","style","background","height","width","display","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/progress-bar/src/progressBar/ProgressBar.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport \"./progressBar.css\"\r\n\r\nexport function ProgressBar({ thresholds, value }) {\r\n  const [progress, setProgress] = useState(value)\r\n  // [25, 50, 100, 200, 500, 1000]\r\n  const getColor = () => {\r\n    return \"violet\"\r\n  }\r\n  const widthOfOneEl = 100/thresholds.length\r\n  function calcWidth(value, arr) {\r\n    if (arr.includes(value)) {\r\n        return arr.indexOf(value) + 1\r\n    }\r\n    const indexElAfterValue = arr.findIndex((x) => value < x)\r\n    console.log(indexElAfterValue, \">>>\")\r\n    const nextElAfterValue = arr[indexElAfterValue]\r\n    const prevElementBeforeValue = arr[indexElAfterValue - 1] === undefined ? 0 : arr[indexElAfterValue - 1]\r\n    const stepBetween = nextElAfterValue - prevElementBeforeValue\r\n    const deference = nextElAfterValue - value\r\n    const remainder = stepBetween/deference\r\n    const result = indexElAfterValue + remainder - 1\r\n    console.log(stepBetween, \"??\")\r\n    return result\r\n  }\r\n  console.log(calcWidth(75, thresholds))\r\n  const k = calcWidth(value, thresholds)\r\n  console.log(k)\r\n  return (\r\n    <div className=\"container\">\r\n        <div className='progress-bar'>\r\n            {thresholds.map((step, i) => {\r\n                return (\r\n                    <div className='progress-step' style={{background: \"grey\", height: \"30px\", width: `${widthOfOneEl}%`, display: \"inline-block\"}}>âœ©{step}</div>\r\n                )\r\n            })}\r\n             <div className='progress-fill' style={{width: `${widthOfOneEl*k}%`, display: \"inline-block\"}}>1</div>\r\n        </div>\r\n        <div className='progress-label'>{progress}</div>\r\n        <button>progress</button>\r\n      </div>\r\n  )\r\n}\r\n\r\n//<div className='progress-bar-fill' style={{width: `${progress}%`, backgroundColor: getColor()}}></div>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}