{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\progress-bar\\\\src\\\\calculator\\\\MoscowExchange.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { inflation } from './inflation';\nimport \"./moscowExchange.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nconst years = [2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024];\nexport function getData(data, contribution) {\n  const result = [];\n  const startIndex = data[0].index;\n  let cumulativeInflation = 1;\n  for (const {\n    month,\n    year,\n    index\n  } of data) {\n    const currentBalance = contribution * index / startIndex;\n    cumulativeInflation *= 1 + inflation[`${month}.${year}`] / 100;\n    result.push({\n      month,\n      year,\n      currentBalance,\n      cumulativeInflation,\n      inflationAdjusted: contribution * cumulativeInflation\n    });\n  }\n  return result;\n}\n\n// 0       +   100_000   +10%  → 110_000\n// 110_000 +   100_000   -20%  → 168_000\n// 168_000 +   100_000   +30%  → 348_400\n//\n\nexport function MoscowExchange() {\n  _s();\n  const [indexDates, setIndexDates] = useState(null);\n  const [chosenMonth, setChosenMonth] = useState(5);\n  const [chosenYear, setChosenYear] = useState(2014);\n  useEffect(() => {\n    fetch(\"./indices.csv\").then(r => r.text()).then(text => {\n      const data = text.split(\"\\n\").slice(1).map(line => {\n        const [date, index] = line.split(\",\");\n        return {\n          date,\n          index\n        };\n      });\n      setIndexDates(data);\n    });\n  }, []);\n  const startMonth = chosenMonth;\n  const startYear = chosenYear;\n  const contribution = 100000;\n\n  // https://www.youtube.com/watch?v=zJDtL-vfWfY\n\n  if (indexDates === null) {\n    return null;\n  }\n  console.log(groupData(indexDates, startMonth, startYear), \">\");\n  const data = groupData(indexDates, startMonth, startYear);\n  const result = getData(data, contribution);\n  console.table(result);\n  // for \n\n  // MM.YY  Balance  M/M  Total\n  // 05.21  100_000                \n  // 06.21  105_000  +5%    +5%\n  // 07.21   95_000  -9.5%  -5%      \n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrap\",\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      value: chosenMonth,\n      onChange: e => setChosenMonth(e.target.value),\n      children: months.map(month => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: month,\n          children: month\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: chosenYear,\n      onChange: e => setChosenYear(e.target.value),\n      children: years.map(year => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          children: year\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"year\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"month\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"current balance\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"cumulative inflation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"inflation adjusted\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"balance\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: result.map(({\n          year,\n          month,\n          currentBalance,\n          cumulativeInflation,\n          inflationAdjusted\n        }, i) => {\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: year\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: month\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: currentBalance.toFixed()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: cumulativeInflation.toFixed(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: inflationAdjusted.toFixed(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s(MoscowExchange, \"I1gYpXn6+z+lfqoGtcqNGXdU4zI=\");\n_c = MoscowExchange;\nfunction groupData(indexDates, startMonth, startYear) {\n  const results = [];\n  while (true) {\n    const dateStart = `${startYear}-${startMonth.toString().padStart(2, \"0\")}`;\n    const startIndex = indexDates.find(({\n      date\n    }) => date.startsWith(dateStart));\n    if (startIndex === undefined) {\n      break;\n    }\n    results.push({\n      year: startYear,\n      month: startMonth,\n      index: startIndex.index\n    });\n    startMonth++;\n    if (startMonth > 12) {\n      startMonth = 1;\n      startYear++;\n    }\n  }\n  return results;\n  // return [\n  //   { month: 5, year: 2021, index },\n  //   { month, year, index },\n  //   { month, year, index },\n  //   { month: 3, year: 2024, index },\n  // ]\n}\nvar _c;\n$RefreshReg$(_c, \"MoscowExchange\");","map":{"version":3,"names":["React","useState","useEffect","inflation","jsxDEV","_jsxDEV","months","years","getData","data","contribution","result","startIndex","index","cumulativeInflation","month","year","currentBalance","push","inflationAdjusted","MoscowExchange","_s","indexDates","setIndexDates","chosenMonth","setChosenMonth","chosenYear","setChosenYear","fetch","then","r","text","split","slice","map","line","date","startMonth","startYear","console","log","groupData","table","className","children","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","i","toFixed","_c","results","dateStart","toString","padStart","find","startsWith","undefined","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/progress-bar/src/calculator/MoscowExchange.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { inflation } from './inflation';\r\nimport \"./moscowExchange.css\";\r\n\r\nconst months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\r\nconst years = [2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024]\r\nexport function getData(data, contribution) {\r\n  const result = []\r\n  const startIndex = data[0].index;\r\n\r\n  let cumulativeInflation = 1;\r\n\r\n  for (const { month, year, index} of data) {\r\n    \r\n    const currentBalance = contribution * index / startIndex\r\n    cumulativeInflation *= 1 + inflation[`${month}.${year}`]/100\r\n    result.push({\r\n      month,\r\n      year,\r\n      currentBalance,\r\n      cumulativeInflation,\r\n      inflationAdjusted: contribution * cumulativeInflation,\r\n    })\r\n  }\r\n  return result\r\n}\r\n\r\n// 0       +   100_000   +10%  → 110_000\r\n// 110_000 +   100_000   -20%  → 168_000\r\n// 168_000 +   100_000   +30%  → 348_400\r\n//\r\n\r\nexport function MoscowExchange() {\r\n  const [indexDates, setIndexDates] = useState(null);\r\n  const [chosenMonth, setChosenMonth] = useState(5);\r\n  const [chosenYear, setChosenYear] = useState(2014)\r\n\r\n  useEffect(() => {\r\n    fetch(\"./indices.csv\").then(r => r.text()).then(text => {\r\n      const data = text.split(\"\\n\").slice(1).map(line => {\r\n        const [date, index] = line.split(\",\");\r\n        return { date, index };\r\n      });\r\n      setIndexDates(data);\r\n    });\r\n  }, []);\r\n\r\n  const startMonth = chosenMonth;\r\n  const startYear = chosenYear;\r\n\r\n  const contribution = 100_000;\r\n\r\n  // https://www.youtube.com/watch?v=zJDtL-vfWfY\r\n  \r\n\r\n  if (indexDates === null) {\r\n    return null;\r\n  }\r\n\r\n  console.log(groupData(indexDates, startMonth, startYear), \">\")\r\n  const data = groupData(indexDates, startMonth, startYear)\r\n\r\n  const result = getData(data, contribution)\r\n\r\n  console.table(result)\r\n  // for \r\n\r\n  // MM.YY  Balance  M/M  Total\r\n  // 05.21  100_000                \r\n  // 06.21  105_000  +5%    +5%\r\n  // 07.21   95_000  -9.5%  -5%      \r\n\r\n  return (\r\n    <div className='wrap'>\r\n    <select value={chosenMonth} onChange={e => setChosenMonth(e.target.value)}>\r\n      {months.map((month) => {\r\n        return (\r\n          <option value={month}>{month}</option>\r\n        )\r\n      })}\r\n    </select>\r\n    <select value={chosenYear} onChange={e => setChosenYear(e.target.value)}>\r\n      {years.map((year) => {\r\n        return (\r\n          <option>{year}</option>\r\n        )\r\n      })}\r\n    </select>\r\n      <table className='table'>\r\n      <thead>\r\n        <tr>\r\n          <th>\r\n            year\r\n          </th>\r\n          <th>\r\n              month\r\n          </th>\r\n          <th>\r\n              current balance\r\n          </th>\r\n          <th>\r\n              cumulative inflation\r\n          </th>\r\n          <th>\r\n              inflation adjusted\r\n          </th>\r\n          <th>\r\n            balance\r\n          </th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {result.map(({year, month, currentBalance, cumulativeInflation, inflationAdjusted}, i) => {\r\n          \r\n          return (\r\n            <tr>\r\n              <td>\r\n                {year}\r\n              </td>\r\n              <td>\r\n                {month}\r\n              </td>\r\n              <td>\r\n                {currentBalance.toFixed()}\r\n              </td>\r\n              <td>\r\n                {cumulativeInflation.toFixed(2)}\r\n              </td>\r\n              <td>\r\n                {inflationAdjusted.toFixed(2)}\r\n              </td>\r\n              <td>\r\n                \r\n              </td>\r\n            </tr>\r\n          )\r\n        })}\r\n      </tbody>\r\n    </table>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction groupData(indexDates, startMonth, startYear) {\r\n  const results = []\r\n  while(true) {\r\n    const dateStart = `${startYear}-${startMonth.toString().padStart(2, \"0\")}`\r\n    const startIndex = indexDates.find(({date}) => date.startsWith(dateStart))\r\n    if (startIndex === undefined) {\r\n      break\r\n    }\r\n    results.push({\r\n      year: startYear,\r\n      month: startMonth,\r\n      index: startIndex.index\r\n    })\r\n    startMonth++\r\n    if (startMonth > 12) {\r\n      startMonth = 1\r\n      startYear++\r\n    }\r\n  }\r\n  return results\r\n  // return [\r\n  //   { month: 5, year: 2021, index },\r\n  //   { month, year, index },\r\n  //   { month, year, index },\r\n  //   { month: 3, year: 2024, index },\r\n  // ]\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}